onkeydown, here's all the code of the application integrate the upload functionality with the notion data base. Assume all the .env things are in place:


# Index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sonic Pages Library</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.11.1/font/bootstrap-icons.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet" type="text/css">
    <link rel="icon" href="logo.svg" type="image/svg+xml">
    <style>
        body {
            font-family: 'Lato', sans-serif;
            min-height: 100vh;
            position: relative;
            padding-bottom: 50px;
            background-color: #f8f9fa;
        }

        .header-gradient {
            background: linear-gradient(to right, #ffa500, #ff6b6b);
            color: white;
            padding: 20px 0;
        }

        .app-logo {
            width: 50px;
            height: 50px;
        }

        .book-card {
            transition: transform 0.2s;
            cursor: pointer;
        }

        .book-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .book-cover {
            height: 300px;
            object-fit: cover;
            border-radius: 4px 4px 0 0;
        }

        .last-read {
            font-size: 0.85rem;
            color: #6c757d;
        }

        footer {
            background: linear-gradient(to right, #ffa500, #ff6b6b);
            color: white;
            padding: 10px;
            text-align: center;
            font-size: 14px;
            font-weight: bold;
            position: absolute;
            bottom: 0;
            width: 100%;
        }

        .search-box {
            max-width: 500px;
            margin: 20px auto;
        }

        .search-input {
            border-radius: 20px;
            padding-left: 20px;
            padding-right: 20px;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header-gradient mb-4">
        <div class="container text-center">
            <h1 class="display-5 mb-0 d-flex align-items-center justify-content-center">
                <img src="logo.svg" alt="App Logo" class="app-logo me-3">
                Sonic Pages Library
            </h1>
        </div>
    </header>

    <!-- Search Box -->
    <div class="search-box">
        <input type="text" class="form-control search-input" placeholder="Search books...">
    </div>

    <!-- Main Content -->
    <div class="container py-4">
        <div class="row g-4">
            <!-- Book Card 1 -->
            

            
        </div>
    </div>

    <!-- Footer -->
    <footer>
        &copy; SonicPages 2024
    </footer>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
    <script>
        // Simulated database/API response
const bookDatabase = {
    books: [
        {
            id: 1,
            title: "The Great Gatsby",
            author: "F. Scott Fitzgerald",
            coverImage: "/api/placeholder/400/300",
            pages: 180,
            lastRead: "2024-03-15",
            genre: "Classic",
            rating: 4.5
        },
        {
            id: 2,
            title: "To Kill a Mockingbird",
            author: "Harper Lee",
            coverImage: "/api/placeholder/400/300",
            pages: 281,
            lastRead: "2024-03-20",
            genre: "Classic",
            rating: 4.8
        },
        {
            id: 3,
            title: "1984",
            author: "George Orwell",
            coverImage: "/api/placeholder/400/300",
            pages: 328,
            lastRead: "2024-03-10",
            genre: "Science Fiction",
            rating: 4.6
        },
        {
            id: 4,
            title: "Pride and Prejudice",
            author: "Jane Austen",
            coverImage: "/api/placeholder/400/300",
            pages: 432,
            lastRead: "2024-03-05",
            genre: "Romance",
            rating: 4.7
        }
    ],

    // Method to get all books
    getAllBooks() {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve(this.books);
            }, 500); // Simulate network delay
        });
    },

    // Method to search books
    searchBooks(query) {
        return new Promise((resolve) => {
            setTimeout(() => {
                const filteredBooks = this.books.filter(book => 
                    book.title.toLowerCase().includes(query.toLowerCase()) ||
                    book.author.toLowerCase().includes(query.toLowerCase()) ||
                    book.genre.toLowerCase().includes(query.toLowerCase())
                );
                resolve(filteredBooks);
            }, 300);
        });
    }
};

// DOM manipulation and event handling
document.addEventListener('DOMContentLoaded', () => {
    const bookContainer = document.querySelector('.row');
    const searchInput = document.querySelector('.search-input');
    const loadingSpinner = createLoadingSpinner();

    // Create and return loading spinner element
    function createLoadingSpinner() {
        const spinner = document.createElement('div');
        spinner.className = 'd-flex justify-content-center my-5';
        spinner.innerHTML = `
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        `;
        return spinner;
    }

    // Create HTML for a single book card
    function createBookCard(book) {
        const date = new Date(book.lastRead).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });

        return `
            <div class="col-md-6 col-lg-4">
                <div class="card book-card" data-book-id="${book.id}">
                    <img src="${book.coverImage}" class="book-cover" alt="${book.title}">
                    <div class="card-body">
                        <h5 class="card-title">${book.title}</h5>
                        <p class="card-text text-muted mb-2">${book.author}</p>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="badge bg-secondary">${book.pages} pages</span>
                            <span class="badge bg-info">${book.genre}</span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="rating">
                                ${createStarRating(book.rating)}
                            </div>
                            <span class="last-read">Last read: ${date}</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }

    // Create star rating HTML
    function createStarRating(rating) {
        const fullStars = Math.floor(rating);
        const hasHalfStar = rating % 1 >= 0.5;
        let starsHTML = '';

        for (let i = 0; i < 5; i++) {
            if (i < fullStars) {
                starsHTML += '<i class="bi bi-star-fill text-warning"></i>';
            } else if (i === fullStars && hasHalfStar) {
                starsHTML += '<i class="bi bi-star-half text-warning"></i>';
            } else {
                starsHTML += '<i class="bi bi-star text-warning"></i>';
            }
        }

        return starsHTML;
    }

    // Display books in the container
    async function displayBooks(books) {
        bookContainer.innerHTML = books.map(book => createBookCard(book)).join('');
        
        // Add click event listeners to all book cards
        document.querySelectorAll('.book-card').forEach(card => {
            card.addEventListener('click', () => {
                const bookId = card.dataset.bookId;
                window.location.href = `index.html?bookId=${bookId}`;
            });
        });
    }

    // Initial load of books
    async function loadBooks() {
        bookContainer.innerHTML = '';
        bookContainer.appendChild(loadingSpinner);

        try {
            const books = await bookDatabase.getAllBooks();
            displayBooks(books);
        } catch (error) {
            bookContainer.innerHTML = `
                <div class="alert alert-danger" role="alert">
                    Error loading books. Please try again later.
                </div>
            `;
        }
    }

    // Handle search input
    let searchTimeout;
    searchInput.addEventListener('input', (e) => {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(async () => {
            const query = e.target.value.trim();
            if (query === '') {
                loadBooks();
            } else {
                bookContainer.innerHTML = '';
                bookContainer.appendChild(loadingSpinner);
                const results = await bookDatabase.searchBooks(query);
                displayBooks(results);
            }
        }, 300);
    });

    // Load books when page loads
    loadBooks();
});
    </script>
</body>
</html>



# reader.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sonic Pages.</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.9.359/pdf.min.js"></script>
    <link rel="icon" href="logo.svg" type="image/svg+xml">
    <link rel="manifest" href="manifest.json">
    <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet" type="text/css">


    <style>
        .pdf-container {
            max-width: 800px;
            margin: 0 auto;
        }
        #pdf-canvas {
            width: 100%;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            margin: 20px 0;
        }
        .controls {
            margin: 20px 0;
        }
        .voice-selection {
            max-width: 300px;
            margin: 0 auto;
        }
        .progress {
            display: none;
            margin: 20px 0;
        }
        #error-alert {
            display: none;
        }
        .app-logo {
            width: 50px;
            height: 50px;
        }
        footer {
            background: linear-gradient(to right, #ffa500, #ff6b6b);
            color: white;
            padding: 10px;
            text-align: center;
            font-size: 14px;
            font-weight: bold;
            position: absolute;
            bottom: 0;
            width: 100%;
        }

        body {
            margin: 0;
            padding: 0;
            min-height: 100vh;
            position: relative;
            font-family: 'Lato', sans-serif;
        }

        .content {
            padding-bottom: 50px; /* Height of the footer */
        }

        #upload-button {
        background: linear-gradient(to right, #ffa500, #ff6b6b);
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        }

        #upload-button .bi {
        margin-right: 8px;
        }
            </style>
</head>
<body class="bg-light">
    <div class="container py-5">
        <div class="pdf-container">
            <!-- Header -->
            <div class="text-center mb-4">
                <h1 class="h3 mb-3">Sonic Pages.<img src="logo.svg" alt="App Logo" class="app-logo" /></h1>
                

                <p class="text-muted">Upload a PDF and convert it to speech</p>
            </div>

            <!-- Error Alert -->
            <div id="error-alert" class="alert alert-danger alert-dismissible fade show" role="alert">
                <span id="error-message"></span>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>

            <!-- Upload Section -->
            <div class="card mb-4">
                <div class="card-body text-center">
                    <input type="file" id="pdf-upload" accept=".pdf" class="d-none">
                    <button id="upload-button" class="btn btn-primary">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-upload me-2" viewBox="0 0 16 16">
                            <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5"/>
                            <path d="M7.646 1.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 2.707V11.5a.5.5 0 0 1-1 0V2.707L5.354 4.854a.5.5 0 1 1-.708-.708z"/>
                        </svg>
                        Upload PDF
                    </button>
                </div>
            </div>

            <!-- Progress Bar -->
            <div class="progress">
                <div id="progress-bar" class="progress-bar" role="progressbar" style="width: 0%"></div>
            </div>

            <!-- PDF Display -->
            <canvas id="pdf-canvas"></canvas>

            <!-- Voice Selection -->
            <div class="voice-selection mb-4">
                <select id="voice-select" class="form-select">
                    <option value="">Select a voice...</option>
                </select>
            </div>

            <!-- Auto Page Flip Toggle -->
            <div class="form-check text-center mb-3">
                <input class="form-check-input" type="checkbox" id="auto-flip" checked>
                <label class="form-check-label" for="auto-flip">
                    Automatically flip to next page
                </label>
            </div>

            <!-- Controls -->
            <div class="controls d-flex justify-content-center gap-2">
                <button id="prev-page" class="btn btn-outline-secondary" disabled>Previous</button>
                <button id="play-button" class="btn btn-success" disabled>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-fill" viewBox="0 0 16 16">
                        <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393"/>
                    </svg>
                </button>
                <button id="pause-button" class="btn btn-warning" disabled>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pause-fill" viewBox="0 0 16 16">
                        <path d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5m5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5"/>
                    </svg>
                </button>
                <button id="stop-button" class="btn btn-danger" disabled>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-stop-fill" viewBox="0 0 16 16">
                        <path d="M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5"/>
                    </svg>
                </button>
                <button id="next-page" class="btn btn-outline-secondary" disabled>Next</button>
            </div>

            <!-- Page Counter -->
            <div id="page-counter" class="text-center text-muted mt-3"></div>
        </div>
    </div>
    <footer> &copy; SonicPages 2024 </footer>
    <script src = 'index.js'></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>

    <script>
       // Add this to your index.js file

        class ServiceWorkerUpdateHandler {
            constructor() {
                this.registration = null;
                this.updateFound = false;
                
                // Initialize update check
                this.init();
            }
            
            async init() {
                if ('serviceWorker' in navigator) {
                    try {
                        this.registration = await navigator.serviceWorker.register('/service-worker.js');
                        
                        // Check for updates immediately
                        this.checkForUpdate();
                        
                        // Check for updates periodically
                        setInterval(() => this.checkForUpdate(), 1000 * 60 * 60); // Check every hour
                        
                    } catch (error) {
                        console.error('ServiceWorker registration failed:', error);
                    }
                }
            }
            
            async checkForUpdate() {
                if (!this.registration) return;
                
                try {
                    await this.registration.update();
                    
                    if (this.registration.waiting && !this.updateFound) {
                        this.updateFound = true;
                        this.showUpdateNotification();
                    }
                    
                } catch (error) {
                    console.error('Error checking for updates:', error);
                }
            }
            
            showUpdateNotification() {
                // Create update notification
                const alert = document.createElement('div');
                alert.className = 'alert alert-info alert-dismissible fade show fixed-top';
                alert.role = 'alert';
                alert.innerHTML = `
                    <strong>Update Available!</strong> 
                    A new version of Sonic Pages is available. 
                    <button type="button" class="btn btn-primary btn-sm ms-3" id="update-app">
                        Update Now
                    </button>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                
                document.body.prepend(alert);
                
                // Handle update button click
                document.getElementById('update-app').addEventListener('click', () => {
                    this.registration.waiting.postMessage('skipWaiting');
                    window.location.reload();
                });
            }
        }

        // Initialize the update handler
        const swUpdateHandler = new ServiceWorkerUpdateHandler();
    </script>

</body>
</html>


# Server.js
const express = require('express'),
    path = require('path');

const { Client } = require("@notionhq/client");
const notion = new Client({ auth: process.env.NOTION_TOKEN });
        

const server = express()

server.use(express.static(path.join(__dirname, 'public'))) 

port = process.env.PORT || 4000

// Home Page route.
server.get('/', (req,res)=> {
    res.sendFile('index.html',{root:'./'})
})

server.listen(port, ()=>{
    console.log(`App live on: http://localhost:${port}`)
})















///////
require('express'),
    path = require('path'),
    multer = require('multer'),
    pdfParse = require('pdf-parse'),
    fs = require('fs'),
    session = require('express-session'),
    ejs = require('ejs')
    
    
const { Client } = require("@notionhq/client");
const image_services = require('./image-services')
const saveUser = require('./saveuser');


const NOTION_TOKEN = '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'
const notion = new Client({ auth: NOTION_TOKEN });
const pageId = '1476201e6d54800f8988dc36c703e092'




const server = express()

server.use(express.static(path.join(__dirname, 'public'))) 
server.use(session({ secret: 'sonic-pages', 
                    resave: false, 
                    saveUninitialized: false, 
                    cookie: { maxAge: 60000 }  }))
server.use(express.urlencoded({ extended: true }));
server.set('view engine', 'ejs')
                  

server.use((req, res, next)=> {
    console.log(req.url)
    next()
})

///////////////////////////////////



// In-memory user store (replace with a real database in production)
const users = new Map();

// Database configuration
const NOTION_PAGE_ID = '1476201e6d54800f8988dc36c703e092';


// Create user database in Notion
async function createUserDatabase(userName) {
    try {
        const response = await notion.databases.create({
            parent: {
                type: "page_id",
                page_id: NOTION_PAGE_ID
            },
            title: [
                {
                    type: "text",
                    text: {
                        content: Sonic - ${userName}'s Library,
                    },
                },
            ],
            properties: {
                Name: { title: {} },
                Email: { email: {} },
                Books: { rich_text: {} },
                LastAccessed: { date: {} },
                Status: { select: {
                    options: [
                        { name: "Active", color: "green" },
                        { name: "Inactive", color: "red" }
                    ]
                }}
            },
        });
        return response;
    } catch (error) {
        console.error('Error creating Notion database:', error);
        throw error;
    }
}

port = process.env.PORT || 3000

// Configure Multer for file uploads
const upload = multer({ dest: "uploads/" });

// Home Page route.
server.get('/', (req,res)=> {

const userData = req.session.user || null; // Retrieve user from session
res.render('index', { userData }); // Pass userData to the EJS view
    
});

// Upload Book Route
server.get('/add-book', (req, res)=>{
    res.sendFile('reader.html',{root:'./'})
});

// Sign-on Page
server.get('/sign-on',(req, res)=>{
    res.sendFile('signon.html',{root:'./'})
})

server.post('/user-data', async (req, res) => {
    try {
        const { email, password } = req.body;

        // Check if user already exists
        if (users.has(email)) {
            // Create session and redirect
            req.session.user = users.get(email);
            return res.render('index',{'data':req.session.user});
        }

        // Create user database in Notion
        const notionDb = await createUserDatabase(email);

        // Store user data
        const userData = {
            email,
            password,
            notionDatabaseId: notionDb.id
        };
        users.set(email, userData);

        // Create session
        req.session.user = userData;

        res.status(201).json({
            message: 'User registered successfully',
            user: {
                email,
                notionDatabaseId: notionDb.id
            }
        });
    } catch (error) {
        console.error('Registration error:', error);
        res.status(500).json({ error: 'Registration failed' });
    }
});





server.post("/upload", upload.single("pdf"), async (req, res) => {
    const tempPath = req.file.path; // Temporary path
    const fileName = image_services.extractTextFromFilename(req.file.originalname);
    const destinationDir = path.join(__dirname, "processed"); // Destination directory
    const destinationPath = path.join(destinationDir, fileName); // Full destination path

    try {
        // Ensure destination directory exists
        if (!fs.existsSync(destinationDir)) {
            fs.mkdirSync(destinationDir);
        }

        // Move the file to the new location
        fs.renameSync(tempPath, destinationPath);

        // Parse the PDF file to extract text and metadata
        const data = await pdfParse(destinationPath);

        // Extract metadata for Notion
        const pageCount = data.numpages || 0;

        // Send data to Notion
        const response = await notion.pages.create({
            parent: { 
                database_id: '1476201e6d54812ca00df7f37936f7a2', // Use this as the database ID
            },
            properties: {
                Name: {
                    title: [
                        {
                            text: {
                                content: fileName,
                            },
                        },
                    ],
                },
                "Page Count": {
                    number: pageCount,
                },
                "Current Page": {
                    number: 1,
                },
                Uploaded: {
                    date: {
                        start: new Date().toISOString(),
                    },
                },
            },
        });

        // Generate Thumbnail
        image_services.generateThumbnail(destinationPath, fileName);

        // Respond with success
        res.status(200).json({ message: "PDF uploaded, moved, and added to Notion successfully!", notionResponse: response });
    } catch (error) {
        console.error("Error processing the file:", error.message);

        // Clean up temporary file if an error occurs
        fs.unlink(tempPath, (unlinkError) => {
            if (unlinkError) console.error("Failed to delete temporary file:", unlinkError);
        });

        res.status(500).json({ error: "Failed to process the PDF or upload to Notion." });
    }
});


server.listen(port, ()=>{
    console.log(App live on: http://localhost:${port})
})
